"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");







var _path = _interopRequireDefault(require("path"));


var _vm = _interopRequireDefault(require("vm"));
var _functionalityConfig = _interopRequireDefault(require("../functionality.config.js"));
var _parseKeyValuePairSeparatedBySymbol = require("@dependency/parseKeyValuePairSeparatedBySymbol");
var _configurationManagement = require("@dependency/configurationManagement");
var _script = require("../script.js");
var _loadStdin = require("../utility/loadStdin.js");
var _isJSCodeToEvaluate = require("../utility/isJSCodeToEvaluate.js");
var _splitArray = require("../utility/splitArray.js");let style = { title: '\x1b[33m\x1b[1m\x1b[7m\x1b[36m', message: '\x1b[96m', italic: '\x1b[2m\x1b[3m', default: '\x1b[0m' };console.log(`\x1b[2m\x1b[3m%s\x1b[0m`, `• Environment variables:`);console.log(`\t${style.italic}%s${style.default} ${style.message}%s${style.default}`, `Command:`, `${process.argv.join(' ')}`);console.log(`\t${style.italic}%s${style.default} ${style.message}%s${style.default}`, `env:`, `entrypointConfigurationKey = ${process.env.entrypointConfigurationKey}`);console.log(`\t${style.italic}%s${style.default} ${style.message}%s${style.default}`, `env:`, `entrypointConfigurationPath = ${process.env.entrypointConfigurationPath}`);console.log(`\t${style.italic}%s${style.default} ${style.message}%s${style.default}`, `env:`, `targetAppBasePath = ${process.env.targetAppBasePath}`);

cliInterface().catch(error => console.error(error));























async function cliInterface({
  commandArgument = process.argv.slice(2),
  argumentDelimiter = '-',
  currentDirectory = process.env.PWD || process.cwd(),
  envrironmentArgument = process.env,
  scriptKeyToInvoke,
  targetProjectConfigPath,
  jsCodeToEvaluate,
  shouldCompileScript } =
[]) {






  let standartInputData = await (0, _loadStdin.loadStdin)();

  let [ownCommandArgument, targetScriptCommandArgument] = (0, _splitArray.splitArrayToTwoByDelimiter)({ array: commandArgument, delimiter: argumentDelimiter });
  let [pairArgument, nonPairArgument] = (0, _splitArray.divideArrayByFilter)({ array: ownCommandArgument, filterFunc: item => item.includes('=') });
  let parsedCommandArgument = (0, _parseKeyValuePairSeparatedBySymbol.parseKeyValuePairSeparatedBySymbolFromArray)({ array: pairArgument, separatingSymbol: '=' });

  process.argv = [process.argv[0], process.argv[1], ...targetScriptCommandArgument];


  let configurationFileLookupCallback = configPath => {
    configPath = (0, _configurationManagement.configurationFileLookup)({
      configurationPath: configPath,
      currentDirectory,
      configurationBasePath: _functionalityConfig.default.targetApp.configurationBasePath }).
    path;

    console.assert(require.resolve(configPath), '\x1b[41m%s\x1b[0m', `❌ Configuration file doesn't exist in ${configPath}`);
    return configPath;
  };


  async function evaluateInterface() {
    scriptKeyToInvoke || (scriptKeyToInvoke = envrironmentArgument.scriptKeyToInvoke);
    targetProjectConfigPath || (targetProjectConfigPath = standartInputData || envrironmentArgument.targetConfig);
    shouldCompileScript || (shouldCompileScript = envrironmentArgument.shouldCompileScript);
    targetProjectConfigPath = configurationFileLookupCallback(targetProjectConfigPath);

    let codeToEvaluateForOwnModule = ownCommandArgument[0],
    defaultEvaluateCallValueForFirstParameter = { targetProjectConfigPath, scriptKeyToInvoke, jsCodeToEvaluate, shouldCompileScript };

    let contextEnvironment = _vm.default.createContext(
    Object.assign(global, {


      _requiredModuleScriptManagerWrapper_: async (...args) => {


        args[0] = Object.assign(defaultEvaluateCallValueForFirstParameter, args[0]);
        await (0, _script.scriptManager)(...args).catch(error => console.log(error));
      } }));


    try {

      let vmScript = new _vm.default.Script(`_requiredModuleScriptManagerWrapper_${codeToEvaluateForOwnModule}`, {
        filename: _path.default.resolve('../') });


      vmScript.runInContext(contextEnvironment, { breakOnSigint: true });
    } catch (error) {
      console.log(`❌ Running 'vm runInContext' code failed during execution.`);
      throw error;
    }
  }


  async function passedArgumentInterface() {
    scriptKeyToInvoke || (scriptKeyToInvoke = parsedCommandArgument.scriptKeyToInvoke || envrironmentArgument.scriptKeyToInvoke || nonPairArgument[0]);
    jsCodeToEvaluate || (jsCodeToEvaluate = parsedCommandArgument.jsCodeToEvaluate || envrironmentArgument.scriptKeyToInvoke || nonPairArgument[1]);
    shouldCompileScript || (shouldCompileScript = parsedCommandArgument.shouldCompileScript || envrironmentArgument.shouldCompileScript || nonPairArgument[2]);
    process.argv[1] = scriptKeyToInvoke || process.argv[1];

    targetProjectConfigPath || (targetProjectConfigPath = parsedCommandArgument.targetConfig || standartInputData || envrironmentArgument.targetConfig);
    targetProjectConfigPath = configurationFileLookupCallback(targetProjectConfigPath);
    await (0, _script.scriptManager)({ targetProjectConfigPath, scriptKeyToInvoke, jsCodeToEvaluate, shouldCompileScript }).catch(error => console.error(error));
  }


  (0, _isJSCodeToEvaluate.isJSCodeToEvaluate)({ string: nonPairArgument[0] }) ? await evaluateInterface() : await passedArgumentInterface();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,