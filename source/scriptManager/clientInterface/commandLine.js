"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");







var _path = _interopRequireDefault(require("path"));


var _vm = _interopRequireDefault(require("vm"));
var _configuration = _interopRequireDefault(require("../../../configuration"));
var _parseKeyValuePairSeparatedBySymbol = require("@dependency/parseKeyValuePairSeparatedBySymbol");
var _configurationManagement = require("@dependency/configurationManagement");
var _ = require("../");
var _loadStdin = require("../utility/loadStdin.js");
var _isJSCodeToEvaluate = require("../utility/isJSCodeToEvaluate.js");
var _splitArray = require("../utility/splitArray.js");let style = { title: '\x1b[33m\x1b[1m\x1b[7m\x1b[36m', message: '\x1b[96m', italic: '\x1b[2m\x1b[3m', default: '\x1b[0m' };console.log(`\x1b[2m\x1b[3m%s\x1b[0m`, `• Environment variables:`);console.log(`\t${style.italic}%s${style.default} ${style.message}%s${style.default}`, `Command:`, `${process.argv.join(' ')}`);console.log(`\t${style.italic}%s${style.default} ${style.message}%s${style.default}`, `env:`, `entrypointConfigurationKey = ${process.env.entrypointConfigurationKey}`);console.log(`\t${style.italic}%s${style.default} ${style.message}%s${style.default}`, `env:`, `entrypointConfigurationPath = ${process.env.entrypointConfigurationPath}`);console.log(`\t${style.italic}%s${style.default} ${style.message}%s${style.default}`, `env:`, `targetAppBasePath = ${process.env.targetAppBasePath}`);

cliInterface().catch(error => console.error(error));





















async function cliInterface({
  envrironmentArgument = process.env,
  commandArgument = process.argv.slice(2),
  currentDirectory = process.env.PWD,
  scriptKeyToInvoke,
  targetProjectConfigPath,
  argumentDelimiter = '-',
  jsCodeToEvaluate } =
[]) {






  let standartInputData = await (0, _loadStdin.loadStdin)();

  let [ownCommandArgument, targetScriptCommandArgument] = (0, _splitArray.splitArrayToTwoByDelimiter)({ array: commandArgument, delimiter: argumentDelimiter });
  let [pairArgument, nonPairArgument] = (0, _splitArray.divideArrayByFilter)({ array: ownCommandArgument, filterFunc: item => item.includes('=') });
  let parsedCommandArgument = (0, _parseKeyValuePairSeparatedBySymbol.parseKeyValuePairSeparatedBySymbolFromArray)({ array: pairArgument, separatingSymbol: '=' });

  process.argv = [process.argv[0], process.argv[1], ...targetScriptCommandArgument];

  const isEvaluateCodeInterface = (0, _isJSCodeToEvaluate.isJSCodeToEvaluate)({ string: nonPairArgument[0] });

  if (isEvaluateCodeInterface) {
    targetProjectConfigPath = targetProjectConfigPath || standartInputData || envrironmentArgument.targetConfig;
    scriptKeyToInvoke = scriptKeyToInvoke || envrironmentArgument.scriptKeyToInvoke;
  } else {
    scriptKeyToInvoke = scriptKeyToInvoke || parsedCommandArgument.scriptKeyToInvoke || envrironmentArgument.scriptKeyToInvoke || nonPairArgument[0];
    jsCodeToEvaluate = jsCodeToEvaluate || parsedCommandArgument.jsCodeToEvaluate || envrironmentArgument.scriptKeyToInvoke || nonPairArgument[1];


    targetProjectConfigPath = targetProjectConfigPath || parsedCommandArgument.targetConfig || standartInputData || envrironmentArgument.targetConfig;

    process.argv[1] = scriptKeyToInvoke || process.argv[1];
  }


  ;({ path: targetProjectConfigPath } = (0, _configurationManagement.configurationFileLookup)({
    configurationPath: targetProjectConfigPath,
    currentDirectory,
    configurationBasePath: _configuration.default.targetApp.configurationBasePath }));


  console.assert(require.resolve(targetProjectConfigPath), '\x1b[41m%s\x1b[0m', `❌ Configuration file doesn't exist in ${targetProjectConfigPath}`);


  if (isEvaluateCodeInterface)
  evaluateCodeInterface({
    codeToEvaluateForOwnModule: ownCommandArgument[0],
    defaultEvaluateCallValueForFirstParameter: { targetProjectConfigPath, scriptKeyToInvoke, jsCodeToEvaluate } }).
  catch(error => console.error(error));else

  await (0, _.scriptManager)({
    targetProjectConfigPath,
    scriptKeyToInvoke,
    jsCodeToEvaluate }).
  catch(error => {
    console.error(error);
  });
}


async function evaluateCodeInterface({
  codeToEvaluateForOwnModule,
  defaultEvaluateCallValueForFirstParameter = {},
  callback = _.scriptManager } =
{}) {
  let contextEnvironment = _vm.default.createContext(
  Object.assign(global, {
    _requiredModule_: async (...args) => {


      args[0] = Object.assign(defaultEvaluateCallValueForFirstParameter, args[0]);
      await callback(...args).catch(error => console.log(error));
    } }));



  try {

    let vmScript = new _vm.default.Script(`_requiredModule_${codeToEvaluateForOwnModule}`, {
      filename: _path.default.resolve('../') });


    vmScript.runInContext(contextEnvironment, { breakOnSigint: true });
  } catch (error) {
    console.log(`❌ Running 'vm runInContext' code failed during execution.`);
    throw error;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,