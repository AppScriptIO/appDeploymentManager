"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.scriptManager = scriptManager;

var _scriptExecution = require("@dependency/scriptExecution");
var _ProjectClass = require("./Project.class.js");
var _javascriptTranspilation = require("@dependency/javascriptTranspilation");

process.on('SIGINT', () => {
  console.log('Caught interrupt signal - scriptManager container level');
  process.exit(0);
});

async function scriptManager({
  targetProjectConfigPath,
  scriptKeyToInvoke,
  jsCodeToEvaluate,
  shouldCompileScript = false })
{
  console.assert(scriptKeyToInvoke, '\x1b[41m%s\x1b[0m', '❌ `scriptKeyToInvoke` parameter must be set.');

  let project = new _ProjectClass.Project({ configurationPath: targetProjectConfigPath });


  let scriptConfigArray = project.configuration['script'];
  console.assert(scriptConfigArray, '\x1b[41m%s\x1b[0m', `❌ config['script'] option in targetProject configuration must exist.`);

  let scriptConfiguration = await (0, _scriptExecution.lookup)({
    script: scriptConfigArray,
    projectRootPath: project.configuration.rootPath,
    scriptKeyToInvoke }).
  catch(error => {
    throw error;
  });

  if (shouldCompileScript) {
    let compiler = new _javascriptTranspilation.Compiler({ babelTransformConfig: project.configuration.configuration.transpilation.babelConfig });
    compiler.requireHook({ restrictToTargetProject: false });




  }

  await (0, _scriptExecution.execute)({

    scriptConfig: scriptConfiguration,
    jsCodeToEvaluate,
    parameter: {
      api: {
        project: project } } }).


  catch(error => {
    console.error(error);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9zY3JpcHRNYW5hZ2VyL3NjcmlwdC5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwib24iLCJjb25zb2xlIiwibG9nIiwiZXhpdCIsInNjcmlwdE1hbmFnZXIiLCJ0YXJnZXRQcm9qZWN0Q29uZmlnUGF0aCIsInNjcmlwdEtleVRvSW52b2tlIiwianNDb2RlVG9FdmFsdWF0ZSIsInNob3VsZENvbXBpbGVTY3JpcHQiLCJhc3NlcnQiLCJwcm9qZWN0IiwiUHJvamVjdCIsImNvbmZpZ3VyYXRpb25QYXRoIiwic2NyaXB0Q29uZmlnQXJyYXkiLCJjb25maWd1cmF0aW9uIiwic2NyaXB0Q29uZmlndXJhdGlvbiIsInNjcmlwdCIsInByb2plY3RSb290UGF0aCIsInJvb3RQYXRoIiwiY2F0Y2giLCJlcnJvciIsImNvbXBpbGVyIiwiQ29tcGlsZXIiLCJiYWJlbFRyYW5zZm9ybUNvbmZpZyIsInRyYW5zcGlsYXRpb24iLCJiYWJlbENvbmZpZyIsInJlcXVpcmVIb29rIiwicmVzdHJpY3RUb1RhcmdldFByb2plY3QiLCJzY3JpcHRDb25maWciLCJwYXJhbWV0ZXIiLCJhcGkiXSwibWFwcGluZ3MiOiI7O0FBRUE7QUFDQTtBQUNBOztBQUVBQSxPQUFPLENBQUNDLEVBQVIsQ0FBVyxRQUFYLEVBQXFCLE1BQU07QUFDekJDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHlEQUFaO0FBQ0FILEVBQUFBLE9BQU8sQ0FBQ0ksSUFBUixDQUFhLENBQWI7QUFDRCxDQUhEOztBQUtPLGVBQWVDLGFBQWYsQ0FBNkI7QUFDbENDLEVBQUFBLHVCQURrQztBQUVsQ0MsRUFBQUEsaUJBRmtDO0FBR2xDQyxFQUFBQSxnQkFIa0M7QUFJbENDLEVBQUFBLG1CQUFtQixHQUFHLEtBSlksRUFBN0I7QUFLSjtBQUNEUCxFQUFBQSxPQUFPLENBQUNRLE1BQVIsQ0FBZUgsaUJBQWYsRUFBa0MsbUJBQWxDLEVBQXVELDhDQUF2RDs7QUFFQSxNQUFJSSxPQUFPLEdBQUcsSUFBSUMscUJBQUosQ0FBWSxFQUFFQyxpQkFBaUIsRUFBRVAsdUJBQXJCLEVBQVosQ0FBZDs7O0FBR0EsTUFBSVEsaUJBQWlCLEdBQUdILE9BQU8sQ0FBQ0ksYUFBUixDQUFzQixRQUF0QixDQUF4QjtBQUNBYixFQUFBQSxPQUFPLENBQUNRLE1BQVIsQ0FBZUksaUJBQWYsRUFBa0MsbUJBQWxDLEVBQXdELHNFQUF4RDs7QUFFQSxNQUFJRSxtQkFBbUIsR0FBRyxNQUFNLDZCQUFPO0FBQ3JDQyxJQUFBQSxNQUFNLEVBQUVILGlCQUQ2QjtBQUVyQ0ksSUFBQUEsZUFBZSxFQUFFUCxPQUFPLENBQUNJLGFBQVIsQ0FBc0JJLFFBRkY7QUFHckNaLElBQUFBLGlCQUhxQyxFQUFQO0FBSTdCYSxFQUFBQSxLQUo2QixDQUl2QkMsS0FBSyxJQUFJO0FBQ2hCLFVBQU1BLEtBQU47QUFDRCxHQU4rQixDQUFoQzs7QUFRQSxNQUFJWixtQkFBSixFQUF5QjtBQUN2QixRQUFJYSxRQUFRLEdBQUcsSUFBSUMsaUNBQUosQ0FBYSxFQUFFQyxvQkFBb0IsRUFBRWIsT0FBTyxDQUFDSSxhQUFSLENBQXNCQSxhQUF0QixDQUFvQ1UsYUFBcEMsQ0FBa0RDLFdBQTFFLEVBQWIsQ0FBZjtBQUNBSixJQUFBQSxRQUFRLENBQUNLLFdBQVQsQ0FBcUIsRUFBRUMsdUJBQXVCLEVBQUUsS0FBM0IsRUFBckI7Ozs7O0FBS0Q7O0FBRUQsUUFBTSw4QkFBUTs7QUFFWkMsSUFBQUEsWUFBWSxFQUFFYixtQkFGRjtBQUdaUixJQUFBQSxnQkFIWTtBQUlac0IsSUFBQUEsU0FBUyxFQUFFO0FBQ1RDLE1BQUFBLEdBQUcsRUFBRTtBQUNIcEIsUUFBQUEsT0FBTyxFQUFFQSxPQUROLEVBREksRUFKQyxFQUFSOzs7QUFTSFMsRUFBQUEsS0FURyxDQVNHQyxLQUFLLElBQUk7QUFDaEJuQixJQUFBQSxPQUFPLENBQUNtQixLQUFSLENBQWNBLEtBQWQ7QUFDRCxHQVhLLENBQU47QUFZRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmaWxlc3lzdGVtIGZyb20gJ2ZzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB7IGV4ZWN1dGUsIGxvb2t1cCB9IGZyb20gJ0BkZXBlbmRlbmN5L3NjcmlwdEV4ZWN1dGlvbidcbmltcG9ydCB7IFByb2plY3QgfSBmcm9tICcuL1Byb2plY3QuY2xhc3MuanMnXG5pbXBvcnQgeyBDb21waWxlciB9IGZyb20gJ0BkZXBlbmRlbmN5L2phdmFzY3JpcHRUcmFuc3BpbGF0aW9uJ1xuXG5wcm9jZXNzLm9uKCdTSUdJTlQnLCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdDYXVnaHQgaW50ZXJydXB0IHNpZ25hbCAtIHNjcmlwdE1hbmFnZXIgY29udGFpbmVyIGxldmVsJylcbiAgcHJvY2Vzcy5leGl0KDApXG59KVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2NyaXB0TWFuYWdlcih7XG4gIHRhcmdldFByb2plY3RDb25maWdQYXRoLCAvLyBjb25maWd1cmF0aW9uIG9iamVjdCBvZiB0aGUgdGFyZ2V0IHByb2plY3QuXG4gIHNjcmlwdEtleVRvSW52b2tlLCAvLyB0aGUga2V5IG5hbWUgZm9yIHRoZSBzY3JpcHQgdGhhdCBzaG91bGQgYmUgZXhlY3V0ZWQgKGNvbXBhcmVkIHdpdGggdGhlIGtleSBpbiB0aGUgY29uZmlndXJhdGlvbiBmaWxlLilcbiAganNDb2RlVG9FdmFsdWF0ZSwgLy8ganMgdG8gZXZhbHVhdGUgb24gdGhlIHJlcXVpcmVkIHNjcmlwdCA9PiAncmVxdWlyZSg8c2NyaXB0UGF0aD4pPGV2YWx1YXRlIGpzPidcbiAgc2hvdWxkQ29tcGlsZVNjcmlwdCA9IGZhbHNlLCAvLyBjb21waWxlIHVzaW5nIHRoZSB0YXJnZXQgcHJvamVjdHMncyBjb25maWd1cmF0aW9uIGZpbGVzLlxufSkge1xuICBjb25zb2xlLmFzc2VydChzY3JpcHRLZXlUb0ludm9rZSwgJ1xceDFiWzQxbSVzXFx4MWJbMG0nLCAn4p2MIGBzY3JpcHRLZXlUb0ludm9rZWAgcGFyYW1ldGVyIG11c3QgYmUgc2V0LicpXG5cbiAgbGV0IHByb2plY3QgPSBuZXcgUHJvamVjdCh7IGNvbmZpZ3VyYXRpb25QYXRoOiB0YXJnZXRQcm9qZWN0Q29uZmlnUGF0aCB9KVxuXG4gIC8vIGxvYWQgZW50cnlwb2ludCBjb25maWd1cmF0aW9uIGFuZCBjaGVjayBmb3IgJ2VudHJ5cG9pbnQnIGtleSAoZW50cnlwb2ludCBrZXkgaG9sZHMgb2JqZWN0IHdpdGggZW50cnlwb2ludCBpbmZvcm1hdGlvbiBsaWtlIGZpbGUgcGF0aCBtYXBwaW5nKVxuICBsZXQgc2NyaXB0Q29uZmlnQXJyYXkgPSBwcm9qZWN0LmNvbmZpZ3VyYXRpb25bJ3NjcmlwdCddXG4gIGNvbnNvbGUuYXNzZXJ0KHNjcmlwdENvbmZpZ0FycmF5LCAnXFx4MWJbNDFtJXNcXHgxYlswbScsIGDinYwgY29uZmlnWydzY3JpcHQnXSBvcHRpb24gaW4gdGFyZ2V0UHJvamVjdCBjb25maWd1cmF0aW9uIG11c3QgZXhpc3QuYClcblxuICBsZXQgc2NyaXB0Q29uZmlndXJhdGlvbiA9IGF3YWl0IGxvb2t1cCh7XG4gICAgc2NyaXB0OiBzY3JpcHRDb25maWdBcnJheSxcbiAgICBwcm9qZWN0Um9vdFBhdGg6IHByb2plY3QuY29uZmlndXJhdGlvbi5yb290UGF0aCxcbiAgICBzY3JpcHRLZXlUb0ludm9rZSxcbiAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgIHRocm93IGVycm9yXG4gIH0pXG5cbiAgaWYgKHNob3VsZENvbXBpbGVTY3JpcHQpIHtcbiAgICBsZXQgY29tcGlsZXIgPSBuZXcgQ29tcGlsZXIoeyBiYWJlbFRyYW5zZm9ybUNvbmZpZzogcHJvamVjdC5jb25maWd1cmF0aW9uLmNvbmZpZ3VyYXRpb24udHJhbnNwaWxhdGlvbi5iYWJlbENvbmZpZyAvKiogU2VhcmNoIGZvciBjb25maWd1cmF0aW9uIGZpbGVzIGZyb20gdGFyZ2V0IHByb2plY3QgKi8gfSlcbiAgICBjb21waWxlci5yZXF1aXJlSG9vayh7IHJlc3RyaWN0VG9UYXJnZXRQcm9qZWN0OiBmYWxzZSAvKiBUcmFuc3BpbGUgZmlsZXMgb2YgdGhlIHRhcmdldCBwcm9qZWN0ICovIH0pXG4gICAgLy8gcHJvY2Vzcy5vbignZXhpdCcsICgpID0+IHtcbiAgICAvLyAgIGNvbnNvbGUubG9nKGNvbXBpbGVyLmxvYWRlZEZpbGVzLm1hcCh2YWx1ZSA9PiB2YWx1ZS5maWxlbmFtZSkpXG4gICAgLy8gICBjb25zb2xlLmxvZyhjb21waWxlci5iYWJlbFJlZ2lzdGVyQ29uZmlnLmlnbm9yZSlcbiAgICAvLyB9KVxuICB9XG5cbiAgYXdhaXQgZXhlY3V0ZSh7XG4gICAgLy8gQXNzdW1pbmcgc2NyaXB0IGlzIHN5bmNocm9ub3VzXG4gICAgc2NyaXB0Q29uZmlnOiBzY3JpcHRDb25maWd1cmF0aW9uLFxuICAgIGpzQ29kZVRvRXZhbHVhdGUsXG4gICAgcGFyYW1ldGVyOiB7XG4gICAgICBhcGk6IHtcbiAgICAgICAgcHJvamVjdDogcHJvamVjdCwgLy8gcGFzc2VkIHRvIHRoZSBleGVjdXRlZCB0YXJnZXQgc2NyaXB0LlxuICAgICAgfSwgLy8gcGFzcyBwcm9qZWN0IGFwaVxuICAgIH0sXG4gIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICB9KVxufVxuIl19