"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.loadStdin = loadStdin;



function loadStdin({ asBuffer = false } = {}) {
  const accumulator = [];
  let len = 0;

  return new Promise(resolve => {
    if (process.stdin.isTTY) {
      let result = asBuffer ? Buffer.concat([]) : accumulator.join('');
      resolve(result);
      return;
    }
    debugger;
    process.stdin.on('readable', () => {
      let chunk;
      while (chunk = process.stdin.read()) {
        accumulator.push(chunk);
        len += chunk.length;
      }
    });

    process.stdin.on('end', () => {
      let result = asBuffer ? Buffer.concat(accumulator, len) : accumulator.join('');
      resolve(result);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS91dGlsaXR5L2xvYWRTdGRpbi5qcyJdLCJuYW1lcyI6WyJsb2FkU3RkaW4iLCJhc0J1ZmZlciIsImFjY3VtdWxhdG9yIiwibGVuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwcm9jZXNzIiwic3RkaW4iLCJpc1RUWSIsInJlc3VsdCIsIkJ1ZmZlciIsImNvbmNhdCIsImpvaW4iLCJvbiIsImNodW5rIiwicmVhZCIsInB1c2giLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7QUFJTyxTQUFTQSxTQUFULENBQW1CLEVBQUVDLFFBQVEsR0FBRyxLQUFiLEtBQXVCLEVBQTFDLEVBQThDO0FBQ25ELFFBQU1DLFdBQVcsR0FBRyxFQUFwQjtBQUNBLE1BQUlDLEdBQUcsR0FBRyxDQUFWOztBQUVBLFNBQU8sSUFBSUMsT0FBSixDQUFZQyxPQUFPLElBQUk7QUFDNUIsUUFBSUMsT0FBTyxDQUFDQyxLQUFSLENBQWNDLEtBQWxCLEVBQXlCO0FBQ3ZCLFVBQUlDLE1BQU0sR0FBR1IsUUFBUSxHQUFHUyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLENBQUgsR0FBdUJULFdBQVcsQ0FBQ1UsSUFBWixDQUFpQixFQUFqQixDQUE1QztBQUNBUCxNQUFBQSxPQUFPLENBQUNJLE1BQUQsQ0FBUDtBQUNBO0FBQ0Q7QUFDRDtBQUNBSCxJQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBY00sRUFBZCxDQUFpQixVQUFqQixFQUE2QixNQUFNO0FBQ2pDLFVBQUlDLEtBQUo7QUFDQSxhQUFRQSxLQUFLLEdBQUdSLE9BQU8sQ0FBQ0MsS0FBUixDQUFjUSxJQUFkLEVBQWhCLEVBQXVDO0FBQ3JDYixRQUFBQSxXQUFXLENBQUNjLElBQVosQ0FBaUJGLEtBQWpCO0FBQ0FYLFFBQUFBLEdBQUcsSUFBSVcsS0FBSyxDQUFDRyxNQUFiO0FBQ0Q7QUFDRixLQU5EOztBQVFBWCxJQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBY00sRUFBZCxDQUFpQixLQUFqQixFQUF3QixNQUFNO0FBQzVCLFVBQUlKLE1BQU0sR0FBR1IsUUFBUSxHQUFHUyxNQUFNLENBQUNDLE1BQVAsQ0FBY1QsV0FBZCxFQUEyQkMsR0FBM0IsQ0FBSCxHQUFxQ0QsV0FBVyxDQUFDVSxJQUFaLENBQWlCLEVBQWpCLENBQTFEO0FBQ0FQLE1BQUFBLE9BQU8sQ0FBQ0ksTUFBRCxDQUFQO0FBQ0QsS0FIRDtBQUlELEdBbkJNLENBQVA7QUFvQkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhhbmRsZSBzdGRpbiBpbnB1dCB1c2luZyBidWZmZXJzIHJhdGhlciB0aGFuIHRoZSBldmVudCBlbWl0dGVyIG9mIHByb2Nlc3Muc3RkaW4sIHdoaWNoIHdpbGwgbm90IGtlZXAgd2FpdGluZyBpbiBhbiBpZGxlIHN0YXRlIGlmIG5vIHBpcGVkIHZhbHVlcyBhcmUgcGFzc2VkIChpbiB0aGUgcHJvZ3JhbSB3YXMgcnVuIHdpdGhvdXQgc2hlbGwgcGlwZWxpbmUpLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9nZXQtc3RkaW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTdGRpbih7IGFzQnVmZmVyID0gZmFsc2UgfSA9IHt9KSB7XG4gIGNvbnN0IGFjY3VtdWxhdG9yID0gW11cbiAgbGV0IGxlbiA9IDBcblxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgaWYgKHByb2Nlc3Muc3RkaW4uaXNUVFkpIHtcbiAgICAgIGxldCByZXN1bHQgPSBhc0J1ZmZlciA/IEJ1ZmZlci5jb25jYXQoW10pIDogYWNjdW11bGF0b3Iuam9pbignJylcbiAgICAgIHJlc29sdmUocmVzdWx0KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGRlYnVnZ2VyXG4gICAgcHJvY2Vzcy5zdGRpbi5vbigncmVhZGFibGUnLCAoKSA9PiB7XG4gICAgICBsZXQgY2h1bmtcbiAgICAgIHdoaWxlICgoY2h1bmsgPSBwcm9jZXNzLnN0ZGluLnJlYWQoKSkpIHtcbiAgICAgICAgYWNjdW11bGF0b3IucHVzaChjaHVuaylcbiAgICAgICAgbGVuICs9IGNodW5rLmxlbmd0aFxuICAgICAgfVxuICAgIH0pXG5cbiAgICBwcm9jZXNzLnN0ZGluLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0ID0gYXNCdWZmZXIgPyBCdWZmZXIuY29uY2F0KGFjY3VtdWxhdG9yLCBsZW4pIDogYWNjdW11bGF0b3Iuam9pbignJylcbiAgICAgIHJlc29sdmUocmVzdWx0KVxuICAgIH0pXG4gIH0pXG59XG4iXX0=