"use strict";
{
  let image = 'rethinkdb:latest',
  processCommand = 'docker',
  containerCommand = ``,
  containerPrefix = 'scriptManager_rehinkdb',
  networkAlais = 'rethinkdb';

  let processArg = [
  `run`,
  `--rm`,


  `--network-alias ${networkAlais}`,
  `--network=${networkName}`,
  `-P `].

  concat([`--name ${containerPrefix}`, `${image}`]);
  console.log(`%s \n %s \n %s`, `\x1b[3m\x1b[2m > ${processCommand} ${processArg.join(' ')}\x1b[0m`, `\t\x1b[3m\x1b[2mimage:\x1b[0m ${image}`, `\t\x1b[3m\x1b[2mcommand:\x1b[0m ${containerCommand}`);

  let childProcess = spawn(processCommand, processArg, {

    detached: false,
    shell: true,
    stdio: ['ignore', 'ignore', 'ignore'],
    env: process.env });

  childProcessArray.push(childProcess);

  console.log(`\x1b[45m%s\x1b[0m`, `[NODE HOST MACHINE] PID: Child ${childProcess.pid}`);
  childProcess.on('error', function (err) {
    throw err;
  });
  childProcess.on('exit', () => {
    console.log(`\x1b[41m%s\x1b[0m`, `[NODE HOST MACHINE] PID: Child ${childProcess.pid} terminated.`);
    spawnSync('docker', [`kill ${containerPrefix}`], {
      detached: false,
      shell: true,
      stdio: 'inherit',
      env: process.env });

  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS9ydW5JbkNvbnRhaW5lci9jb250YWluZXJTY3JpcHQvcmV0aGlua2RiLmpzIl0sIm5hbWVzIjpbImltYWdlIiwicHJvY2Vzc0NvbW1hbmQiLCJjb250YWluZXJDb21tYW5kIiwiY29udGFpbmVyUHJlZml4IiwibmV0d29ya0FsYWlzIiwicHJvY2Vzc0FyZyIsIm5ldHdvcmtOYW1lIiwiY29uY2F0IiwiY29uc29sZSIsImxvZyIsImpvaW4iLCJjaGlsZFByb2Nlc3MiLCJzcGF3biIsImRldGFjaGVkIiwic2hlbGwiLCJzdGRpbyIsImVudiIsInByb2Nlc3MiLCJjaGlsZFByb2Nlc3NBcnJheSIsInB1c2giLCJwaWQiLCJvbiIsImVyciIsInNwYXduU3luYyJdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0UsTUFBSUEsS0FBSyxHQUFHLGtCQUFaO0FBQ0VDLEVBQUFBLGNBQWMsR0FBRyxRQURuQjtBQUVFQyxFQUFBQSxnQkFBZ0IsR0FBSSxFQUZ0QjtBQUdFQyxFQUFBQSxlQUFlLEdBQUcsd0JBSHBCO0FBSUVDLEVBQUFBLFlBQVksR0FBRyxXQUpqQjs7QUFNQSxNQUFJQyxVQUFVLEdBQUc7QUFDZCxPQURjO0FBRWQsUUFGYzs7O0FBS2QscUJBQWtCRCxZQUFhLEVBTGpCO0FBTWQsZUFBWUUsV0FBWSxFQU5WO0FBT2QsT0FQYzs7QUFTZkMsRUFBQUEsTUFUZSxDQVNSLENBQUUsVUFBU0osZUFBZ0IsRUFBM0IsRUFBK0IsR0FBRUgsS0FBTSxFQUF2QyxDQVRRLENBQWpCO0FBVUFRLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLGdCQUFiLEVBQStCLG9CQUFtQlIsY0FBZSxJQUFHSSxVQUFVLENBQUNLLElBQVgsQ0FBZ0IsR0FBaEIsQ0FBcUIsU0FBekYsRUFBb0csaUNBQWdDVixLQUFNLEVBQTFJLEVBQThJLG1DQUFrQ0UsZ0JBQWlCLEVBQWpNOztBQUVBLE1BQUlTLFlBQVksR0FBR0MsS0FBSyxDQUFDWCxjQUFELEVBQWlCSSxVQUFqQixFQUE2Qjs7QUFFbkRRLElBQUFBLFFBQVEsRUFBRSxLQUZ5QztBQUduREMsSUFBQUEsS0FBSyxFQUFFLElBSDRDO0FBSW5EQyxJQUFBQSxLQUFLLEVBQUUsQ0FBQyxRQUFELEVBQVcsUUFBWCxFQUFxQixRQUFyQixDQUo0QztBQUtuREMsSUFBQUEsR0FBRyxFQUFFQyxPQUFPLENBQUNELEdBTHNDLEVBQTdCLENBQXhCOztBQU9BRSxFQUFBQSxpQkFBaUIsQ0FBQ0MsSUFBbEIsQ0FBdUJSLFlBQXZCOztBQUVBSCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxtQkFBYixFQUFrQyxrQ0FBaUNFLFlBQVksQ0FBQ1MsR0FBSSxFQUFwRjtBQUNBVCxFQUFBQSxZQUFZLENBQUNVLEVBQWIsQ0FBZ0IsT0FBaEIsRUFBeUIsVUFBU0MsR0FBVCxFQUFjO0FBQ3JDLFVBQU1BLEdBQU47QUFDRCxHQUZEO0FBR0FYLEVBQUFBLFlBQVksQ0FBQ1UsRUFBYixDQUFnQixNQUFoQixFQUF3QixNQUFNO0FBQzVCYixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxtQkFBYixFQUFrQyxrQ0FBaUNFLFlBQVksQ0FBQ1MsR0FBSSxjQUFwRjtBQUNBRyxJQUFBQSxTQUFTLENBQUMsUUFBRCxFQUFXLENBQUUsUUFBT3BCLGVBQWdCLEVBQXpCLENBQVgsRUFBd0M7QUFDL0NVLE1BQUFBLFFBQVEsRUFBRSxLQURxQztBQUUvQ0MsTUFBQUEsS0FBSyxFQUFFLElBRndDO0FBRy9DQyxNQUFBQSxLQUFLLEVBQUUsU0FId0M7QUFJL0NDLE1BQUFBLEdBQUcsRUFBRUMsT0FBTyxDQUFDRCxHQUprQyxFQUF4QyxDQUFUOztBQU1ELEdBUkQ7QUFTRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIFJFVEhJTktEQlxue1xuICBsZXQgaW1hZ2UgPSAncmV0aGlua2RiOmxhdGVzdCcsIC8vIHRoaXMgY29udGFpbmVyIHNob3VsZCBoYXZlIGRvY2tlciBjbGllbnQgJiBkb2NrZXItY29tcG9zZSBpbnN0YWxsZWQgaW4uXG4gICAgcHJvY2Vzc0NvbW1hbmQgPSAnZG9ja2VyJyxcbiAgICBjb250YWluZXJDb21tYW5kID0gYGAsXG4gICAgY29udGFpbmVyUHJlZml4ID0gJ3NjcmlwdE1hbmFnZXJfcmVoaW5rZGInLFxuICAgIG5ldHdvcmtBbGFpcyA9ICdyZXRoaW5rZGInXG5cbiAgbGV0IHByb2Nlc3NBcmcgPSBbXG4gICAgYHJ1bmAsXG4gICAgYC0tcm1gLCAvLyBhdXRvbWF0aWNhbGx5IHJlbW92ZSBhZnRlciBjb250YWluZXIgZXhpc3RzLlxuICAgIC8vIGAtLWludGVyYWN0aXZlIC0tdHR5YCwgLy8gYWxsb2NhdGUgYSB0ZXJtaW5hbCAtIHRoaXMgYWxsb3dzIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBjb250YWluZXIgcHJvY2Vzcy5cbiAgICAvLyBgLS12b2x1bWUgJHthcHBsaWNhdGlvbi5ob3N0UGF0aH06JHthcHBsaWNhdGlvbi5wYXRoSW5Db250YWluZXJ9YCxcbiAgICBgLS1uZXR3b3JrLWFsaWFzICR7bmV0d29ya0FsYWlzfWAsXG4gICAgYC0tbmV0d29yaz0ke25ldHdvcmtOYW1lfWAsXG4gICAgYC1QIGAsXG4gICAgLy8gYC1QYFxuICBdLmNvbmNhdChbYC0tbmFtZSAke2NvbnRhaW5lclByZWZpeH1gLCBgJHtpbWFnZX1gXSlcbiAgY29uc29sZS5sb2coYCVzIFxcbiAlcyBcXG4gJXNgLCBgXFx4MWJbM21cXHgxYlsybSA+ICR7cHJvY2Vzc0NvbW1hbmR9ICR7cHJvY2Vzc0FyZy5qb2luKCcgJyl9XFx4MWJbMG1gLCBgXFx0XFx4MWJbM21cXHgxYlsybWltYWdlOlxceDFiWzBtICR7aW1hZ2V9YCwgYFxcdFxceDFiWzNtXFx4MWJbMm1jb21tYW5kOlxceDFiWzBtICR7Y29udGFpbmVyQ29tbWFuZH1gKVxuXG4gIGxldCBjaGlsZFByb2Nlc3MgPSBzcGF3bihwcm9jZXNzQ29tbWFuZCwgcHJvY2Vzc0FyZywge1xuICAgIC8vIGRldGFjaGVkOiBmYWxzZSwgc2hlbGw6IHRydWUsIHN0ZGlvOiBbICdpbmhlcml0JywgJ2luaGVyaXQnLCAnaW5oZXJpdCcsICdpcGMnIF0sXG4gICAgZGV0YWNoZWQ6IGZhbHNlLFxuICAgIHNoZWxsOiB0cnVlLFxuICAgIHN0ZGlvOiBbJ2lnbm9yZScsICdpZ25vcmUnLCAnaWdub3JlJ10sXG4gICAgZW52OiBwcm9jZXNzLmVudiwgLy8gcGFzcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgbGlrZSBwcm9jZXNzLmVudi5QV0QgdG8gc3Bhd24gcHJvY2Vzc1xuICB9KVxuICBjaGlsZFByb2Nlc3NBcnJheS5wdXNoKGNoaWxkUHJvY2VzcylcbiAgLy8gY2hpbGRQcm9jZXNzLnVucmVmKCkgLy8gcHJldmVudCBwYXJlbnQgZnJvbSB3YWl0aW5nIHRvIGNoaWxkIHByb2Nlc3MgYW5kIHVuIHJlZmVyZW5jZSBjaGlsZCBmcm9tIHBhcmVudCdzIGV2ZW50IGxvb3AuXG4gIGNvbnNvbGUubG9nKGBcXHgxYls0NW0lc1xceDFiWzBtYCwgYFtOT0RFIEhPU1QgTUFDSElORV0gUElEOiBDaGlsZCAke2NoaWxkUHJvY2Vzcy5waWR9YClcbiAgY2hpbGRQcm9jZXNzLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xuICAgIHRocm93IGVyclxuICB9KVxuICBjaGlsZFByb2Nlc3Mub24oJ2V4aXQnLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coYFxceDFiWzQxbSVzXFx4MWJbMG1gLCBgW05PREUgSE9TVCBNQUNISU5FXSBQSUQ6IENoaWxkICR7Y2hpbGRQcm9jZXNzLnBpZH0gdGVybWluYXRlZC5gKVxuICAgIHNwYXduU3luYygnZG9ja2VyJywgW2BraWxsICR7Y29udGFpbmVyUHJlZml4fWBdLCB7XG4gICAgICBkZXRhY2hlZDogZmFsc2UsXG4gICAgICBzaGVsbDogdHJ1ZSxcbiAgICAgIHN0ZGlvOiAnaW5oZXJpdCcsXG4gICAgICBlbnY6IHByb2Nlc3MuZW52LCAvLyBwYXNzIGVudmlyb25tZW50IHZhcmlhYmxlcyBsaWtlIHByb2Nlc3MuZW52LlBXRCB0byBzcGF3biBwcm9jZXNzXG4gICAgfSlcbiAgfSlcbn1cbiJdfQ==