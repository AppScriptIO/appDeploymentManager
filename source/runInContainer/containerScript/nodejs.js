"use strict";var _convertWindowsPathToUnix = require("../../utility/convertWindowsPathToUnix.js");

{

  const applicationPathOnHostMachine = (0, _convertWindowsPathToUnix.convertWindowsPathToUnix)({ path: application.hostPath });

  let image = 'myuserindocker/deployment-environment:simple_NodeDockerCompose',
  processCommand = 'docker',
  commandArgument = scriptManager.commandArgument,
  containerCommand = `node ${scriptManager.absolutePathInContainer} ${commandArgument.join(' ')}`,

  containerPrefix = 'scriptManager';

  let processArg = [
  `run`,
  `--rm`,
  `--interactive --tty`,
  `--volume ${application.hostPath}:${application.pathInContainer}`,

  `--volume /var/run/docker.sock:/var/run/docker.sock`,
  `--volume ${operatingSystem.homedir()}/.ssh:/project/.ssh`,
  `--network=${networkName}`,
  `-P`,
  `--env applicationPathOnHostMachine=${applicationPathOnHostMachine}`,
  `--env sshUsername=${operatingSystem.userInfo().username}`,
  `--env PWD=${workingDirectoryInContainer_PWD}`,
  `--workdir ${workingDirectoryInContainer_CWD}`,
  `--env configurationPath=${configurationAbsoluteContainerPath}`].

  concat(convertObjectToDockerEnvFlag(exportEnvironmentArg)).
  concat([`--name ${containerPrefix}`, `${image}`, `${containerCommand}`]);
  console.log(`%s \n %s \n %s`, `\x1b[3m\x1b[2m > ${processCommand} ${processArg.join(' ')}\x1b[0m`, `\t\x1b[3m\x1b[2mimage:\x1b[0m ${image}`, `\t\x1b[3m\x1b[2mcommand:\x1b[0m ${containerCommand}`);

  let childProcess = spawn(processCommand, processArg, {
    detached: false,
    shell: true,
    stdio: ['inherit', 'inherit', 'inherit', 'ipc'],
    env: process.env });

  childProcessArray.push(childProcess);

  console.log(`\x1b[45m%s\x1b[0m`, `[NODE HOST MACHINE] PID: Child ${childProcess.pid}`);
  childProcess.on('error', function (err) {
    throw err;
  });
  childProcess.on('exit', () => {
    console.log(`\x1b[41m%s\x1b[0m`, `[NODE HOST MACHINE] PID: Child ${childProcess.pid} terminated.`);

    killChildProcess();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS9ydW5JbkNvbnRhaW5lci9jb250YWluZXJTY3JpcHQvbm9kZWpzLmpzIl0sIm5hbWVzIjpbImFwcGxpY2F0aW9uUGF0aE9uSG9zdE1hY2hpbmUiLCJwYXRoIiwiYXBwbGljYXRpb24iLCJob3N0UGF0aCIsImltYWdlIiwicHJvY2Vzc0NvbW1hbmQiLCJjb21tYW5kQXJndW1lbnQiLCJzY3JpcHRNYW5hZ2VyIiwiY29udGFpbmVyQ29tbWFuZCIsImFic29sdXRlUGF0aEluQ29udGFpbmVyIiwiam9pbiIsImNvbnRhaW5lclByZWZpeCIsInByb2Nlc3NBcmciLCJwYXRoSW5Db250YWluZXIiLCJvcGVyYXRpbmdTeXN0ZW0iLCJob21lZGlyIiwibmV0d29ya05hbWUiLCJ1c2VySW5mbyIsInVzZXJuYW1lIiwid29ya2luZ0RpcmVjdG9yeUluQ29udGFpbmVyX1BXRCIsIndvcmtpbmdEaXJlY3RvcnlJbkNvbnRhaW5lcl9DV0QiLCJjb25maWd1cmF0aW9uQWJzb2x1dGVDb250YWluZXJQYXRoIiwiY29uY2F0IiwiY29udmVydE9iamVjdFRvRG9ja2VyRW52RmxhZyIsImV4cG9ydEVudmlyb25tZW50QXJnIiwiY29uc29sZSIsImxvZyIsImNoaWxkUHJvY2VzcyIsInNwYXduIiwiZGV0YWNoZWQiLCJzaGVsbCIsInN0ZGlvIiwiZW52IiwicHJvY2VzcyIsImNoaWxkUHJvY2Vzc0FycmF5IiwicHVzaCIsInBpZCIsIm9uIiwiZXJyIiwia2lsbENoaWxkUHJvY2VzcyJdLCJtYXBwaW5ncyI6ImFBQUE7O0FBRUE7O0FBRUUsUUFBTUEsNEJBQTRCLEdBQUcsd0RBQXlCLEVBQUVDLElBQUksRUFBRUMsV0FBVyxDQUFDQyxRQUFwQixFQUF6QixDQUFyQzs7QUFFQSxNQUFJQyxLQUFLLEdBQUcsZ0VBQVo7QUFDRUMsRUFBQUEsY0FBYyxHQUFHLFFBRG5CO0FBRUVDLEVBQUFBLGVBQWUsR0FBR0MsYUFBYSxDQUFDRCxlQUZsQztBQUdFRSxFQUFBQSxnQkFBZ0IsR0FBSSxRQUFPRCxhQUFhLENBQUNFLHVCQUF3QixJQUFHSCxlQUFlLENBQUNJLElBQWhCLENBQXFCLEdBQXJCLENBQTBCLEVBSGhHOztBQUtFQyxFQUFBQSxlQUFlLEdBQUcsZUFMcEI7O0FBT0EsTUFBSUMsVUFBVSxHQUFHO0FBQ2QsT0FEYztBQUVkLFFBRmM7QUFHZCx1QkFIYztBQUlkLGNBQVdWLFdBQVcsQ0FBQ0MsUUFBUyxJQUFHRCxXQUFXLENBQUNXLGVBQWdCLEVBSmpEOztBQU1kLHNEQU5jO0FBT2QsY0FBV0MsZUFBZSxDQUFDQyxPQUFoQixFQUEwQixxQkFQdkI7QUFRZCxlQUFZQyxXQUFZLEVBUlY7QUFTZCxNQVRjO0FBVWQsd0NBQXFDaEIsNEJBQTZCLEVBVnBEO0FBV2QsdUJBQW9CYyxlQUFlLENBQUNHLFFBQWhCLEdBQTJCQyxRQUFTLEVBWDFDO0FBWWQsZUFBWUMsK0JBQWdDLEVBWjlCO0FBYWQsZUFBWUMsK0JBQWdDLEVBYjlCO0FBY2QsNkJBQTBCQyxrQ0FBbUMsRUFkL0M7O0FBZ0JkQyxFQUFBQSxNQWhCYyxDQWdCUEMsNEJBQTRCLENBQUNDLG9CQUFELENBaEJyQjtBQWlCZEYsRUFBQUEsTUFqQmMsQ0FpQlAsQ0FBRSxVQUFTWCxlQUFnQixFQUEzQixFQUErQixHQUFFUCxLQUFNLEVBQXZDLEVBQTJDLEdBQUVJLGdCQUFpQixFQUE5RCxDQWpCTyxDQUFqQjtBQWtCQWlCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLGdCQUFiLEVBQStCLG9CQUFtQnJCLGNBQWUsSUFBR08sVUFBVSxDQUFDRixJQUFYLENBQWdCLEdBQWhCLENBQXFCLFNBQXpGLEVBQW9HLGlDQUFnQ04sS0FBTSxFQUExSSxFQUE4SSxtQ0FBa0NJLGdCQUFpQixFQUFqTTs7QUFFQSxNQUFJbUIsWUFBWSxHQUFHQyxLQUFLLENBQUN2QixjQUFELEVBQWlCTyxVQUFqQixFQUE2QjtBQUNuRGlCLElBQUFBLFFBQVEsRUFBRSxLQUR5QztBQUVuREMsSUFBQUEsS0FBSyxFQUFFLElBRjRDO0FBR25EQyxJQUFBQSxLQUFLLEVBQUUsQ0FBQyxTQUFELEVBQVksU0FBWixFQUF1QixTQUF2QixFQUFrQyxLQUFsQyxDQUg0QztBQUluREMsSUFBQUEsR0FBRyxFQUFFQyxPQUFPLENBQUNELEdBSnNDLEVBQTdCLENBQXhCOztBQU1BRSxFQUFBQSxpQkFBaUIsQ0FBQ0MsSUFBbEIsQ0FBdUJSLFlBQXZCOztBQUVBRixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxtQkFBYixFQUFrQyxrQ0FBaUNDLFlBQVksQ0FBQ1MsR0FBSSxFQUFwRjtBQUNBVCxFQUFBQSxZQUFZLENBQUNVLEVBQWIsQ0FBZ0IsT0FBaEIsRUFBeUIsVUFBU0MsR0FBVCxFQUFjO0FBQ3JDLFVBQU1BLEdBQU47QUFDRCxHQUZEO0FBR0FYLEVBQUFBLFlBQVksQ0FBQ1UsRUFBYixDQUFnQixNQUFoQixFQUF3QixNQUFNO0FBQzVCWixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxtQkFBYixFQUFrQyxrQ0FBaUNDLFlBQVksQ0FBQ1MsR0FBSSxjQUFwRjs7QUFFQUcsSUFBQUEsZ0JBQWdCO0FBQ2pCLEdBSkQ7QUFLRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnRXaW5kb3dzUGF0aFRvVW5peCB9IGZyb20gJy4uLy4uL3V0aWxpdHkvY29udmVydFdpbmRvd3NQYXRoVG9Vbml4LmpzJ1xuLy8gTUFOQUdFUiBBUFBcbntcbiAgLy8gVGhlIGFwcGxpY2F0aW9uUGF0aE9uSG9zdE1hY2hpbmUgaXMgdGhlIHBhdGggb24gdGhlIG1hY2hpbmUgd2hpY2ggZG9ja2VyIGNsaWVudCBlbnZva2VkIG1hbmFnZXIgYXBwLiBJbiBjYXNlIG9mIERvY2tlciBmb3IgV2luZG93cywgdGhlIHBhdGggaXMgYSBXaW5kb3dzIHBhdGguIFdoaWxlIHRoZSBwYXRoIHNlbnQgZnJvbSBhIHJ1bm5pbmcgY29udGFpbmVyLCBzaG91bGQgYmUgcmVmZXJpbmcgdG8gdGhlIGh5cGVyLXYgTW9ieUxpbnV4Vk0gKGluc2lkZSBjcmVhdGVkIGJ5IERvY2tlciBmb3IgV2luZG93cyBhcmUgL2hvc3RfbW50L2MsIHdpdGggc3ltbGlua3MgL2MgJiAvQykuXG4gIGNvbnN0IGFwcGxpY2F0aW9uUGF0aE9uSG9zdE1hY2hpbmUgPSBjb252ZXJ0V2luZG93c1BhdGhUb1VuaXgoeyBwYXRoOiBhcHBsaWNhdGlvbi5ob3N0UGF0aCB9KSAvLyBjaGFuZ2UgV2luZG93cyBwYXRoIHRvIFVuaXggcGF0aCAtIE5vdGUgdGhhdCB1c2luZyBVbml4IC8gb24gV2luZG93cyB3b3JrcyBwZXJmZWN0bHkgaW5zaWRlIG5vZGVqcywgc28gdGhlcmUncyBubyByZWFzb24gdG8gc3RpY2sgdG8gdGhlIFdpbmRvd3MgbGVnYWN5IGF0IGFsbC5cblxuICBsZXQgaW1hZ2UgPSAnbXl1c2VyaW5kb2NrZXIvZGVwbG95bWVudC1lbnZpcm9ubWVudDpzaW1wbGVfTm9kZURvY2tlckNvbXBvc2UnLCAvLyB0aGlzIGNvbnRhaW5lciBzaG91bGQgaGF2ZSBkb2NrZXIgY2xpZW50ICYgZG9ja2VyLWNvbXBvc2UgaW5zdGFsbGVkIGluLlxuICAgIHByb2Nlc3NDb21tYW5kID0gJ2RvY2tlcicsXG4gICAgY29tbWFuZEFyZ3VtZW50ID0gc2NyaXB0TWFuYWdlci5jb21tYW5kQXJndW1lbnQsXG4gICAgY29udGFpbmVyQ29tbWFuZCA9IGBub2RlICR7c2NyaXB0TWFuYWdlci5hYnNvbHV0ZVBhdGhJbkNvbnRhaW5lcn0gJHtjb21tYW5kQXJndW1lbnQuam9pbignICcpfWAsXG4gICAgLy8gY29udGFpbmVyQmFzaENvbW1hbmQgPSBgYmFzaCAtYyBcIiR7Y29udGFpbmVyQ29tbWFuZENhc2UxfSB8fCAke2NvbnRhaW5lckNvbW1hbmRDYXNlMn1cImAsXG4gICAgY29udGFpbmVyUHJlZml4ID0gJ3NjcmlwdE1hbmFnZXInXG5cbiAgbGV0IHByb2Nlc3NBcmcgPSBbXG4gICAgYHJ1bmAsXG4gICAgYC0tcm1gLCAvLyBhdXRvbWF0aWNhbGx5IHJlbW92ZSBhZnRlciBjb250YWluZXIgZXhpc3RzLlxuICAgIGAtLWludGVyYWN0aXZlIC0tdHR5YCwgLy8gYWxsb2NhdGUgYSB0ZXJtaW5hbCAtIHRoaXMgYWxsb3dzIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBjb250YWluZXIgcHJvY2Vzcy5cbiAgICBgLS12b2x1bWUgJHthcHBsaWNhdGlvbi5ob3N0UGF0aH06JHthcHBsaWNhdGlvbi5wYXRoSW5Db250YWluZXJ9YCxcbiAgICAvLyBgLS12b2x1bWUgJHtzY3JpcHRNYW5hZ2VySG9zdFBhdGh9Oi9wcm9qZWN0L3NjcmlwdE1hbmFnZXJgLFxuICAgIGAtLXZvbHVtZSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29ja2AsXG4gICAgYC0tdm9sdW1lICR7b3BlcmF0aW5nU3lzdGVtLmhvbWVkaXIoKX0vLnNzaDovcHJvamVjdC8uc3NoYCxcbiAgICBgLS1uZXR3b3JrPSR7bmV0d29ya05hbWV9YCxcbiAgICBgLVBgLFxuICAgIGAtLWVudiBhcHBsaWNhdGlvblBhdGhPbkhvc3RNYWNoaW5lPSR7YXBwbGljYXRpb25QYXRoT25Ib3N0TWFjaGluZX1gLFxuICAgIGAtLWVudiBzc2hVc2VybmFtZT0ke29wZXJhdGluZ1N5c3RlbS51c2VySW5mbygpLnVzZXJuYW1lfWAsXG4gICAgYC0tZW52IFBXRD0ke3dvcmtpbmdEaXJlY3RvcnlJbkNvbnRhaW5lcl9QV0R9YCwgLy8gcGFzcyBQV0QgYWJzb2x1dGUgcGF0aCBhcyBpbiBjb250YWluZXIgKGNvbnZlcnQgaG9zdCBtYWNoaW5lIHBhdGggdG8gY29udGFpbmVyIHBhdGgpXG4gICAgYC0td29ya2RpciAke3dvcmtpbmdEaXJlY3RvcnlJbkNvbnRhaW5lcl9DV0R9YCxcbiAgICBgLS1lbnYgY29uZmlndXJhdGlvblBhdGg9JHtjb25maWd1cmF0aW9uQWJzb2x1dGVDb250YWluZXJQYXRofWAsIC8vIHBhc3MgdGhlIGFic29sdXRlIHBhdGggb2YgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZVxuICBdXG4gICAgLmNvbmNhdChjb252ZXJ0T2JqZWN0VG9Eb2NrZXJFbnZGbGFnKGV4cG9ydEVudmlyb25tZW50QXJnKSkgLy8gcGFzcyBhbGwgZW52cmlubWVudCB2YXJpYWJsZXMgLSBjYXVzZXMgaXNzdWVzIGFzIHNvbWUgdmFyaWFibGVzIGxpa2UgYFBBVEhgIGFyZSByZWxhdGVkIHRvIHRoZSBleGVjdXRlZCBzY3JpcHQsIHRoZXJlZm9yZSBzaG91bGQgYmUgZmlsdGVyZWQgYmVmb3JlaGFuZC5cbiAgICAuY29uY2F0KFtgLS1uYW1lICR7Y29udGFpbmVyUHJlZml4fWAsIGAke2ltYWdlfWAsIGAke2NvbnRhaW5lckNvbW1hbmR9YF0pXG4gIGNvbnNvbGUubG9nKGAlcyBcXG4gJXMgXFxuICVzYCwgYFxceDFiWzNtXFx4MWJbMm0gPiAke3Byb2Nlc3NDb21tYW5kfSAke3Byb2Nlc3NBcmcuam9pbignICcpfVxceDFiWzBtYCwgYFxcdFxceDFiWzNtXFx4MWJbMm1pbWFnZTpcXHgxYlswbSAke2ltYWdlfWAsIGBcXHRcXHgxYlszbVxceDFiWzJtY29tbWFuZDpcXHgxYlswbSAke2NvbnRhaW5lckNvbW1hbmR9YClcblxuICBsZXQgY2hpbGRQcm9jZXNzID0gc3Bhd24ocHJvY2Vzc0NvbW1hbmQsIHByb2Nlc3NBcmcsIHtcbiAgICBkZXRhY2hlZDogZmFsc2UsXG4gICAgc2hlbGw6IHRydWUsXG4gICAgc3RkaW86IFsnaW5oZXJpdCcsICdpbmhlcml0JywgJ2luaGVyaXQnLCAnaXBjJ10sXG4gICAgZW52OiBwcm9jZXNzLmVudiwgLy8gcGFzcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgbGlrZSBwcm9jZXNzLmVudi5QV0QgdG8gc3Bhd24gcHJvY2Vzc1xuICB9KVxuICBjaGlsZFByb2Nlc3NBcnJheS5wdXNoKGNoaWxkUHJvY2VzcylcbiAgLy8gY2hpbGRQcm9jZXNzLnVucmVmKCkgLy8gcHJldmVudCBwYXJlbnQgZnJvbSB3YWl0aW5nIHRvIGNoaWxkIHByb2Nlc3MgYW5kIHVuIHJlZmVyZW5jZSBjaGlsZCBmcm9tIHBhcmVudCdzIGV2ZW50IGxvb3AuXG4gIGNvbnNvbGUubG9nKGBcXHgxYls0NW0lc1xceDFiWzBtYCwgYFtOT0RFIEhPU1QgTUFDSElORV0gUElEOiBDaGlsZCAke2NoaWxkUHJvY2Vzcy5waWR9YClcbiAgY2hpbGRQcm9jZXNzLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xuICAgIHRocm93IGVyclxuICB9KVxuICBjaGlsZFByb2Nlc3Mub24oJ2V4aXQnLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coYFxceDFiWzQxbSVzXFx4MWJbMG1gLCBgW05PREUgSE9TVCBNQUNISU5FXSBQSUQ6IENoaWxkICR7Y2hpbGRQcm9jZXNzLnBpZH0gdGVybWluYXRlZC5gKVxuICAgIC8vIGlmIGNoaWxkIHByb2Nlc3MgZXhpdHMgdGhlbiByZW1vdmUgYWxsIG90aGVyIHJ1bm5pbmcgcHJvY2Vzc2VzXG4gICAga2lsbENoaWxkUHJvY2VzcygpXG4gIH0pXG59XG4iXX0=