"use strict";var _convertWindowsPathToUnix = require("../../utility/convertWindowsPathToUnix.js");

{


  const applicationPathOnHostMachine = (0, _convertWindowsPathToUnix.convertWindowsPathToUnix)({ path: application.hostPath });

  let image = 'myuserindocker/deployment-environment:simple_NodeDockerCompose',
  processCommand = 'docker',
  commandArgument = scriptManager.commandArgument,
  containerCommand = `node ${scriptManager.absolutePathInContainer} ${commandArgument.join(' ')}`,

  containerPrefix = 'scriptManager';

  let processArg = [
  `run`,
  `--rm`,
  `--interactive --tty`,
  `--volume ${application.hostPath}:${application.pathInContainer}`,

  `--volume /var/run/docker.sock:/var/run/docker.sock`,
  `--volume ${operatingSystem.homedir()}/.ssh:/project/.ssh`,
  `--network=${networkName}`,
  `-P`,
  `--env applicationPathOnHostMachine=${applicationPathOnHostMachine}`,
  `--env sshUsername=${operatingSystem.userInfo().username}`,
  `--env PWD=${workingDirectoryInContainer_PWD}`,
  `--workdir ${workingDirectoryInContainer_CWD}`,
  `--env configurationPath=${configurationAbsoluteContainerPath}`].

  concat(convertObjectToDockerEnvFlag(exportEnvironmentArg)).
  concat([
  `--name ${containerPrefix}`,
  `${image}`,
  `${containerCommand}`]);

  console.log(
  `%s \n %s \n %s`,
  `\x1b[3m\x1b[2m > ${processCommand} ${processArg.join(' ')}\x1b[0m`,
  `\t\x1b[3m\x1b[2mimage:\x1b[0m ${image}`,
  `\t\x1b[3m\x1b[2mcommand:\x1b[0m ${containerCommand}`);


  let childProcess = spawn(processCommand, processArg, {
    detached: false, shell: true, stdio: ['inherit', 'inherit', 'inherit', 'ipc'],
    env: process.env });

  childProcessArray.push(childProcess);

  console.log(`\x1b[45m%s\x1b[0m`, `[NODE HOST MACHINE] PID: Child ${childProcess.pid}`);
  childProcess.on('error', function (err) {throw err;});
  childProcess.on('exit', () => {
    console.log(`\x1b[41m%s\x1b[0m`, `[NODE HOST MACHINE] PID: Child ${childProcess.pid} terminated.`);

    killChildProcess();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,