"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _path = _interopRequireDefault(require("path"));
var _slash = _interopRequireDefault(require("slash"));

const parsedArg = require('yargs').argv;

const containerPath = {
  application: '/project/application' };


parsedArg.env = !Array.isArray(parsedArg.env) ? [parsedArg.env] : parsedArg.env;
let exportEnvironmentArg = parsedArg.env.reduce((accumulator, currentValue) => {
  if (process.env[currentValue])
    accumulator[currentValue] = process.env[currentValue];
  return accumulator;
}, {});












module.exports = function runInContainer(input) {

  console.log(process.argv);

  let application = {},scriptManager = {},invokedDirectly,configurationAbsoluteHostPath;
  ({
    configurationAbsoluteHostPath,
    application: {
      hostPath: application.hostPath,
      configuration: application.configuration,
      pathInContainer: application.pathInContainer = application.configuration.directory.application.containerAbsolutePath || containerPath.application },


    scriptManager: {
      hostRelativePath: scriptManager.hostRelativePath,
      commandArgument: scriptManager.commandArgument = process.argv },

    invokedDirectly = false } =
  input);

  scriptManager.commandArgument = invokedDirectly ?
  scriptManager.commandArgument.slice(2) :
  scriptManager.commandArgument.slice(3),

  scriptManager.relativePathFromProject = _path.default.relative(application.hostPath, scriptManager.hostRelativePath);
  scriptManager.relativePathFromProject = (0, _slash.default)(scriptManager.relativePathFromProject);

  scriptManager.absolutePathInContainer = (0, _slash.default)(_path.default.join(application.pathInContainer, scriptManager.relativePathFromProject));

  let configurationAbsoluteContainerPath;
  {
    let relativePathFromProject = _path.default.relative(application.hostPath, configurationAbsoluteHostPath);
    relativePathFromProject = (0, _slash.default)(relativePathFromProject);
    configurationAbsoluteContainerPath = (0, _slash.default)(_path.default.join(application.pathInContainer, relativePathFromProject));
  }


  let hostWorkingDirectory_PWD = process.env.PWD,
  workingDirectoryRelativeToApp_PWD = (0, _slash.default)(_path.default.relative(application.hostPath, hostWorkingDirectory_PWD)),
  workingDirectoryInContainer_PWD = (0, _slash.default)(_path.default.join(application.pathInContainer, workingDirectoryRelativeToApp_PWD));
  let hostWorkingDirectory_CWD = process.cwd(),
  workingDirectoryRelativeToApp_CWD = (0, _slash.default)(_path.default.relative(application.hostPath, hostWorkingDirectory_CWD)),
  workingDirectoryInContainer_CWD = (0, _slash.default)(_path.default.join(application.pathInContainer, workingDirectoryRelativeToApp_CWD));

  let childProcessArray = [];
  function killChildProcess({ childProcesses = childProcessArray } = {}) {
    childProcesses.forEach((childProcess, index) => {
      childProcess.kill('SIGINT');
      childProcess.kill('SIGTERM');
      childProcesses.splice(index, 1);
    });

  }


  console.log('creating containers !!!!!');


  process.on('SIGINT', () => {
    console.log("â€¢ [NODE HOST MACHINE] Caught interrupt signal - host machine level");
    killChildProcess();
  });

  console.groupEnd();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,